skewness(moments)
curtose <- momento4 / (sqrt(moment2)^4)
assimetria <- momento3/(sqrt(media_final_so - mean(media_final_so)^2))^3)
assimetria <- momento3/(sqrt(media_final_so - mean(media_final_so)^2))^3
sum(media_final_so)
mean(media_final_so)
mean(media_final_so)^2
95.34 - 40.39874
#simetria
# coeficiente de assimetria
skewness(media_final_so)
require(moments)
#simetria
# coeficiente de assimetria
skewness(media_final_so)
moment2 <-  media_final_so - sqrt(media_final_so)^2
moment2
median(media_final_so)
# Assimetria e curtose sem momento
assimetria <- 3* mean(media_final_so - mediana(media_final_so)) / desvio_padrao
# Assimetria e curtose sem momento
assimetria <- 3* mean(media_final_so - median(media_final_so)) / desvio_padrao
assimetria
t <- data.frame(xf, x2f)
xf<- frequencia_absoluta * media_classes
x2f <- frequencia_absoluta ^ 2 * media_classes
frequencia_absoluta <- c(1, 5, 8, 1)
xf<- frequencia_absoluta * media_classes
x2f <- frequencia_absoluta ^ 2 * media_classes
t <- data.frame(xf, x2f)
xf <- frequencia_absoluta * media_classes
media_classes <- c(1, 1, 1, 1)
xf <- frequencia_absoluta * media_classes
x2f <- frequencia_absoluta ^ 2 * media_classes
t <- data.frame(xf, x2f)
View(t)
p10 <-( 10/100) * 15
p10
distribuicao_frequencia <- data.frame("Classes" = classes, "Frequencia absoluta" = frequencia_absoluta, "Frequencia A%" = frequencia_absoluta_porcentagem,
"Frequencia acumulada" = frequencia_acumulada, "Frequencia relativa"= frequencia_relativa, "Frequencia R%"=frequencia_relativa_porcentagem)
require(moments)
# 1 questao
# Formula x = (1 * B1+2 * B2 + 3 X B3 + 4 * B4)/ 10
# Tabela Sistema Operacional
b1 <- c(7.7, 10.0,9.2,8.0,5.7,2.0,9.6,9.1,8.0,9.2,10.0,7.7,10.0,10.0,5.2)
b2 <- c(6.5,7.5,6.5,5.0,4.5,3.0,8.5,5.0,8.0,9.5,10.0,5.0,9.0,9.0,5.0)
b3 <- c(5.0,7.0,5.0,4.5,4.0,4.5,6.0,5.5,5.0,8.5,7.0,7.0,7.0,7.0,5.0)
b4 <- c(4.0, 7.0,7.0,6.0,6.0,0.0,7.0,6.0,6.5,7.5,7.5,7.5,6.5,6.5,6.0)
sistema_operacional <- data.frame( "B1"= b1, "B2"=b2, "B3"=b3, "B4"=b4)
media_final_so <- c()
for( i in 1:15){
linha = i;
x <- (1 * sistema_operacional[linha,1] +2 * sistema_operacional[linha,2] + 3 * sistema_operacional[linha,3] + 4 * sistema_operacional[linha,4])/ 10
media_final_so[linha] <- x
}
print(media_final_so)
b1_mat <- c(2.0,7.2,2.0,4.3,2.0,0.0,4.6,2.5,3.0,6.5,7.3,4.3,8.6,10.0,1.0)
b2_mat <- c(3.3,10.0,7.3,3.7,4.0,1.0,5.8,3.2,4.9,10.0,9.1,7.6,5.4,10.0,1.4)
b3_mat <- c(4.4,9.5,9.0,4.0,5.0,0.0,5.8,3.2,3.5,6.5,5.2,4.0,6.3,10.0,4.6)
b4_mat <- c(3.0,7.0,7.5,9.1,3.0,0.0,6.5,3.0,3.0,8.0,9.0,9.0,7.0,8.0,4.0)
matematica <- data.frame( "B1"= b1_mat, "B2"=b2_mat, "B3"=b3_mat, "B4"=b4_mat)
media_final_mat <- c()
for( i in 1:15){
linha = i;
x <- (1 * matematica[linha,1] +2 * matematica[linha,2] + 3 * matematica[linha,3] + 4 * matematica[linha,4])/ 10
media_final_mat[linha] <- x
}
print(media_final_mat)
b1_fisica <- c(5.0,10.0,5.0,5.5,2.0,0.0,5.5,4.5,7.5,8.0,8.5,10.0,9.0,9.0,3.0)
b2_fisica <- c(6.0,8.0,9.0,7.0,6.0,6.0,6.0,6.0,6.0,6.5,6.0,6.0,7.0,7.5,7.0)
b3_fisica <- c(6.5,10.0,9.0,8.5,5.5,4.0,9.0,6.5,3.0,9.5,10.0,8.5,10.0,10.0,4.0)
b4_fisica <- c(4.0,10.0,8.0,5.0,0.0,0.0,7.0,2.0,2.0,6.0,9.0,8.0,7.0,8.0,2.0)
fisica <- data.frame( "B1"= b1_fisica, "B2"=b2_fisica, "B3"= b3_fisica, "B4"=b4_fisica)
media_final_fisica <- c()
for( i in 1:15){
linha = i;
x <- (1 * fisica[linha,1] +2 * fisica[linha,2] + 3 * fisica[linha,3] + 4 * fisica[linha,4])/ 10
media_final_fisica[linha] <- x
}
print(media_final_fisica)
# MEDIA FINAL POR DISCIPLINA
media_final <- data.frame("Física" = media_final_fisica, "Matematica" = media_final_mat, "Sistema Operacional" = media_final_so)
# MEDIA
sum_fisica <- sum(media_final_fisica)
sum_mat <- sum(media_final_mat)
sum_so <- sum(media_final_so)
media_fisica <- sum_fisica / 15
media_mat <- sum_mat / 15
media_so <- sum_so / 15
media_geral_disciplina <- (media_fisica + media_mat + media_so) / 3
median(media_final_so)
# Se a media for da disciplina de SO entao a resposta e 6.36 e a mediana e 6.52
# 2 questao
ordem_1 <- quantile(media_final_so, type = 7)
# 0%   25%   50%   75%  100%
# 2.150 5.485 6.520 7.450 8.370
# Reposta 5.49 e 7.45
# 3 questao
boxplot(media_final_so)
# 4 questao
# Variancia
vari <- function(x){
v = sum((x-mean(x))^2)/length(x)
return(v)
}
media_so <- mean(media_final_so)
variancia <- vari(x = media_final_so)
desvio_padrao <- sqrt(variancia)
coeficiente <- (desvio_padrao/media_so)*100
#05 questao
result <- media_final_so - 1 * (desvio_padrao)
result2 <-  media_final_so + 1 * (desvio_padrao)
#Distibuicao de frequencia
numero_de_classes <- sqrt(length(media_final_so))
print(media_final_so)
# Descobrindo a amplitude
# Verificando o maior e menor valor do vetor
valor_max <- max(media_final_so)
valor_min <- min(media_final_so)
# Ou podemos usar o método summury
summary(media_final_so)
# Calculando amplitude total
amplitude_total <- max(media_final_so) -  min(media_final_so)
# Calculando o numero de classes usando a regra de Stuges
# k = 1 + 3.3 * log n
quantidade_de_notas <- length(media_final_so)
numero_classes <- 1 + 3.3 * log10(quantidade_de_notas)
total_classes <- 4 # valor arredondado de numero de classes
# Numero de classes sera 4
# Calculando a amplitude das classes
amplitude_do_intervalo_das_classes <- amplitude_total / total_classes
amplitudes_classes <- 2
# Definindo as classes
classes <- c("2.15 - 4.15", "4.15 - 6.15", "6.15 - 8.15", "8.15 - 10.15")
frequencia_absoluta <- c(1, 5, 8, 1)
frequencia_absoluta_porcentagem <- (frequencia_absoluta/quantidade_de_notas)* 100
frequencia_acumulada <- cumsum(frequencia_absoluta)
frequencia_relativa <- frequencia_absoluta / quantidade_de_notas
frequencia_relativa_porcentagem <- frequencia_relativa*100
distribuicao_frequencia <- data.frame("Classes" = classes, "Frequencia absoluta" = frequencia_absoluta, "Frequencia A%" = frequencia_absoluta_porcentagem,
"Frequencia acumulada" = frequencia_acumulada, "Frequencia relativa"= frequencia_relativa, "Frequencia R%"=frequencia_relativa_porcentagem)
# Calculando a moda
# Lm - valor de maior frequencia
d1 <- 8 - 5
d2 <-8 - 1
hm <- 2
moda <- 6.15 + (d1 / (d1+d2)) * hm
# moda 7.15
media <- sum(media_final_so) / quantidade_de_notas
moment2 <-  media_final_so - sqrt(media_final_so)^2
momento3 <- ((sum(media_final_so - mean(media_final_so))^3) / 14)
momento4 <- ((sum(media_final_so - mean(media_final_so))^4) / 14)
assimetria <- momento3/(sqrt(media_final_so - mean(media_final_so)^2))^3
p10 <-( 10/100) * 15
#simetria
# coeficiente de assimetria
skewness(media_final_so)
View(distribuicao_frequencia)
p10c <-( 10/100) * 15
p10c
p10 <- 4.15 + (1.5 - 1) / 5 * 2
p10
p25c <-( 25/100) * 15
pc25
p25c
p25 <- 4.15 + (3.75 - 1) / 5 * 2
p25
p75 <- ( 75/100) * 15
p75
p90c <-  ( 90/100) * 15
p90c
curtose <-( p75 - p10 )/ 2*(p90 - p10)
p90 <- 6.15 + (13.5 - 1)/ 8 * 2
p10c <-( 10/100) * 15
p25c <-( 25/100) * 15
p75c <- ( 75/100) * 15
p90c <-  ( 90/100) * 15
p10 <- 4.15 + (1.5 - 1) / 5 * 2
p25 <- 4.15 + (3.75 - 1) / 5 * 2
p75 <- 6.15 + (11.25 - 1)/ 8 * 2
p90 <- 6.15 + (13.5 - 1)/ 8 * 2
curtose <-( p75 - p10 )/ 2*(p90 - p10)
curtose
curtose <-( p75 - p25 )/ 2*(p90 - p10)
curtose
curtose <-( p75 - p25 )/( 2*(p90 - p10))
curtose
result <- media_final_so - 1 * (desvio_padrao)
result
result2 <-   mean(media_final_so + 1 * (desvio_padrao)
result <- mean(media_final_so) - 1 * (desvio_padrao)
result2 <-   mean(media_final_so) + 1 * (desvio_padrao)
result <- mean(media_final_so) - 1 * (desvio_padrao)
result
result2
View(media_final_so)
media_final_so
sort(media_final_so)
sistema_operacional <- data.frame( "B1"= b1, "B2"=b2, "B3"=b3, "B4"=b4)
View(sistema_operacional)
sort(sistema_operacional)
s_o <- c(7.7, 10.0,9.2,8.0,5.7,2.0,9.6,9.1,8.0,9.2,10.0,7.7,10.0,10.0,5.2,6.5,7.5,
6.5,5.0,4.5,3.0,8.5,5.0,8.0,9.5,10.0,5.0,9.0,9.0,5.0,5.0,7.0,5.0,4.5,4.0,4.5,6.0,5.5,5.0,8.5,7.0,7.0,7.0,7.0,5.0,
4.0, 7.0,7.0,6.0,6.0,0.0,7.0,6.0,6.5,7.5,7.5,7.5,6.5,6.5,6.0)
View(s_o)
sort(s_o)
25/60
1 - (25/60)
View(distribuicao_frequencia)
moda
numero_de_classes
amplitude_do_intervalo_das_classes
max(media_final_so)
sort(media_final_so)
frequencia_absoluta <- c(1, 2, 5, 7)
frequencia_absoluta_porcentagem <- (frequencia_absoluta/quantidade_de_notas)* 100
frequencia_acumulada <- cumsum(frequencia_absoluta)
frequencia_relativa <- frequencia_absoluta / quantidade_de_notas
frequencia_relativa_porcentagem <- frequencia_relativa*100
distribuicao_frequencia <- data.frame("Classes" = classes, "Frequencia absoluta" = frequencia_absoluta, "Frequencia A%" = frequencia_absoluta_porcentagem,
classes <- c("2.15 - 3.705", "3.705 - 5.26", "5.26 - 6.815", "6.815 - 8.37")
frequencia_absoluta <- c(1, 2, 5, 7)
frequencia_absoluta_porcentagem <- (frequencia_absoluta/quantidade_de_notas)* 100
frequencia_acumulada <- cumsum(frequencia_absoluta)
frequencia_relativa <- frequencia_absoluta / quantidade_de_notas
frequencia_relativa_porcentagem <- frequencia_relativa*100
distribuicao_frequencia <- data.frame("Classes" = classes, "Frequencia absoluta" = frequencia_absoluta, "Frequencia A%" = frequencia_absoluta_porcentagem,
"Frequencia acumulada" = frequencia_acumulada, "Frequencia relativa"= frequencia_relativa, "Frequencia R%"=frequencia_relativa_porcentagem)
View(distribuicao_frequencia)
d1 <- 7 - 5
d2 <-7 - 0
hm <- 1.555
moda <- 8.15 + (d1 / (d1+d2)) * hm
moda
classes <- c("2.15 - 4.15", "4.15 - 6.15", "6.15 - 8.15", "8.15 - 10.15")
require(moments)
# 1 questao
# Formula x = (1 * B1+2 * B2 + 3 X B3 + 4 * B4)/ 10
# Tabela Sistema Operacional
b1 <- c(7.7, 10.0,9.2,8.0,5.7,2.0,9.6,9.1,8.0,9.2,10.0,7.7,10.0,10.0,5.2)
b2 <- c(6.5,7.5,6.5,5.0,4.5,3.0,8.5,5.0,8.0,9.5,10.0,5.0,9.0,9.0,5.0)
b3 <- c(5.0,7.0,5.0,4.5,4.0,4.5,6.0,5.5,5.0,8.5,7.0,7.0,7.0,7.0,5.0)
b4 <- c(4.0, 7.0,7.0,6.0,6.0,0.0,7.0,6.0,6.5,7.5,7.5,7.5,6.5,6.5,6.0)
sistema_operacional <- data.frame( "B1"= b1, "B2"=b2, "B3"=b3, "B4"=b4)
s_o <- c(7.7, 10.0,9.2,8.0,5.7,2.0,9.6,9.1,8.0,9.2,10.0,7.7,10.0,10.0,5.2,6.5,7.5,
6.5,5.0,4.5,3.0,8.5,5.0,8.0,9.5,10.0,5.0,9.0,9.0,5.0,5.0,7.0,5.0,4.5,4.0,4.5,6.0,5.5,5.0,8.5,7.0,7.0,7.0,7.0,5.0,
4.0, 7.0,7.0,6.0,6.0,0.0,7.0,6.0,6.5,7.5,7.5,7.5,6.5,6.5,6.0)
media_final_so <- c()
for( i in 1:15){
linha = i;
x <- (1 * sistema_operacional[linha,1] +2 * sistema_operacional[linha,2] + 3 * sistema_operacional[linha,3] + 4 * sistema_operacional[linha,4])/ 10
media_final_so[linha] <- x
}
print(media_final_so)
b1_mat <- c(2.0,7.2,2.0,4.3,2.0,0.0,4.6,2.5,3.0,6.5,7.3,4.3,8.6,10.0,1.0)
b2_mat <- c(3.3,10.0,7.3,3.7,4.0,1.0,5.8,3.2,4.9,10.0,9.1,7.6,5.4,10.0,1.4)
b3_mat <- c(4.4,9.5,9.0,4.0,5.0,0.0,5.8,3.2,3.5,6.5,5.2,4.0,6.3,10.0,4.6)
b4_mat <- c(3.0,7.0,7.5,9.1,3.0,0.0,6.5,3.0,3.0,8.0,9.0,9.0,7.0,8.0,4.0)
matematica <- data.frame( "B1"= b1_mat, "B2"=b2_mat, "B3"=b3_mat, "B4"=b4_mat)
media_final_mat <- c()
for( i in 1:15){
linha = i;
x <- (1 * matematica[linha,1] +2 * matematica[linha,2] + 3 * matematica[linha,3] + 4 * matematica[linha,4])/ 10
media_final_mat[linha] <- x
}
print(media_final_mat)
b1_fisica <- c(5.0,10.0,5.0,5.5,2.0,0.0,5.5,4.5,7.5,8.0,8.5,10.0,9.0,9.0,3.0)
b2_fisica <- c(6.0,8.0,9.0,7.0,6.0,6.0,6.0,6.0,6.0,6.5,6.0,6.0,7.0,7.5,7.0)
b3_fisica <- c(6.5,10.0,9.0,8.5,5.5,4.0,9.0,6.5,3.0,9.5,10.0,8.5,10.0,10.0,4.0)
b4_fisica <- c(4.0,10.0,8.0,5.0,0.0,0.0,7.0,2.0,2.0,6.0,9.0,8.0,7.0,8.0,2.0)
fisica <- data.frame( "B1"= b1_fisica, "B2"=b2_fisica, "B3"= b3_fisica, "B4"=b4_fisica)
media_final_fisica <- c()
for( i in 1:15){
linha = i;
x <- (1 * fisica[linha,1] +2 * fisica[linha,2] + 3 * fisica[linha,3] + 4 * fisica[linha,4])/ 10
media_final_fisica[linha] <- x
}
print(media_final_fisica)
# MEDIA FINAL POR DISCIPLINA
media_final <- data.frame("Física" = media_final_fisica, "Matematica" = media_final_mat, "Sistema Operacional" = media_final_so)
# MEDIA
sum_fisica <- sum(media_final_fisica)
sum_mat <- sum(media_final_mat)
sum_so <- sum(media_final_so)
media_fisica <- sum_fisica / 15
media_mat <- sum_mat / 15
media_so <- sum_so / 15
media_geral_disciplina <- (media_fisica + media_mat + media_so) / 3
median(media_final_so)
# Se a media for da disciplina de SO entao a resposta e 6.36 e a mediana e 6.52
# 2 questao
ordem_1 <- quantile(media_final_so, type = 7)
# 0%   25%   50%   75%  100%
# 2.150 5.485 6.520 7.450 8.370
# Reposta 5.49 e 7.45
# 3 questao
boxplot(media_final_so)
# 4 questao
# Variancia
vari <- function(x){
v = sum((x-mean(x))^2)/length(x)
return(v)
}
media_so <- mean(media_final_so)
variancia <- vari(x = media_final_so)
desvio_padrao <- sqrt(variancia)
coeficiente <- (desvio_padrao/media_so)*100
#05 questao
result <- mean(media_final_so) - 1 * (desvio_padrao) #4.842339 8
result2 <-   mean(media_final_so) + 1 * (desvio_padrao) # 7.869661 17
#Distibuicao de frequencia
numero_de_classes <- sqrt(length(media_final_so))
print(media_final_so)
# Descobrindo a amplitude
# Verificando o maior e menor valor do vetor
valor_max <- max(media_final_so)
valor_min <- min(media_final_so)
# Ou podemos usar o método summury
summary(media_final_so)
# Calculando amplitude total
amplitude_total <- max(media_final_so) -  min(media_final_so)
# Calculando o numero de classes usando a regra de Stuges
# k = 1 + 3.3 * log n
quantidade_de_notas <- length(media_final_so)
numero_classes <- 1 + 3.3 * log10(quantidade_de_notas)
total_classes <- 4 # valor arredondado de numero de classes
# Numero de classes sera 4
# Calculando a amplitude das classes
amplitude_do_intervalo_das_classes <- amplitude_total / total_classes
amplitudes_classes <- 2
# Definindo as classes
classes <- c("2.15 - 4.15", "4.15 - 6.15", "6.15 - 8.15", "8.15 - 10.15")
frequencia_absoluta <- c(1, 5, 8, 1)
frequencia_absoluta_porcentagem <- (frequencia_absoluta/quantidade_de_notas)* 100
frequencia_acumulada <- cumsum(frequencia_absoluta)
frequencia_relativa <- frequencia_absoluta / quantidade_de_notas
frequencia_relativa_porcentagem <- frequencia_relativa*100
distribuicao_frequencia <- data.frame("Classes" = classes, "Frequencia absoluta" = frequencia_absoluta, "Frequencia A%" = frequencia_absoluta_porcentagem,
"Frequencia acumulada" = frequencia_acumulada, "Frequencia relativa"= frequencia_relativa, "Frequencia R%"=frequencia_relativa_porcentagem)
# Calculando a moda
# Lm -
d1 <- 8 - 5
d2 <-8 - 1
hm <- 2
moda <- 6.15 + (d1 / (d1+d2)) * hm
# moda 7.15
media <- sum(media_final_so) / quantidade_de_notas
moment2 <-  media_final_so - sqrt(media_final_so)^2
momento3 <- ((sum(media_final_so - mean(media_final_so))^3) / 14)
momento4 <- ((sum(media_final_so - mean(media_final_so))^4) / 14)
assimetria <- momento3/(sqrt(media_final_so - mean(media_final_so)^2))^3
p10c <-( 10/100) * 15
p25c <-( 25/100) * 15
p75c <- ( 75/100) * 15
p90c <-  ( 90/100) * 15
p10 <- 4.15 + (1.5 - 1) / 5 * 2
p25 <- 4.15 + (3.75 - 1) / 5 * 2
p75 <- 6.15 + (11.25 - 1)/ 8 * 2
p90 <- 6.15 + (13.5 - 1)/ 8 * 2
curtose <-( p75 - p25 )/( 2*(p90 - p10))
#simetria
# coeficiente de assimetria
skewness(media_final_so)
moda
#simetria
# coeficiente de assimetria
skewness(media_final_so)
curtose <-( p75 - p25 )/( 2*(p90 - p10))
curtose
media_so <- mean(media_final_so)
media_so
variancia
desvio_padrao
coeficiente <- (desvio_padrao/media_so)*100
coeficiente
mean(media_final_so)
median(media_final_so)
sort(media_final_so)
View(distribuicao_frequencia)
View(tabela_frequencia)
sum(tabela_frequencia[2])
sum(frequencia_absoluta)
sum(valor_absoluto)
0.25*106
#Letra B
encontra_classe_quartil <- 0.25*106
encontra_classe_quartil
limite_inferior_da_classe <- 94
frequencia_acumulada_classe_anterior <- 16
frequencia_absoluta_classe_quartil <- 52
amplitude_da_classe <- 2
q1 <- limite_inferior_da_classe +( (encontra_classe_quartil - frequencia_acumulada_classe_anterior)/frequencia_absoluta_classe_quartil) * amplitude_da_classe
q1
# Ordem 3
encontra_classe_quartil_ordem_3 <- 0.75*106
frequencia_absoluta_classe_quartil_ordem_3 <- 52
frequencia_acumulada_classe_anterior_ordem_3 <- 16
limite_inferior_da_classe_ordem_3 <- 94
encontra_classe_quartil_ordem_3
q2 <- limite_inferior_da_classe_ordem_3 +( (encontra_classe_quartil_ordem_3 - frequencia_acumulada_classe_anterior_ordem_3)/frequencia_absoluta_classe_quartil_ordem_3) * amplitude_da_classe
q2
lista_temperatura_ordenada <- sort(temperaturas)
lista_temperatura_ordenada
variancia <- varianciaFunction(lista_temperatura_ordenada)
varianciaFunction <- function(x){
v = sum((x-mean(x))^2)/length(x)
return(v)
}
variancia
desvio_padrao_lista <- sqrt(variancia)
desvio_padrao
desvio_padrao_lista
desvio_padrao_lista <- sqrt(variancia)
coeficiente <- (desvio_padrao/lista_temperatura_ordenada)*100
coeficiente
coeficiente <- (desvio_padrao/media_so)*100
coeficiente
media_lista_temperatura <- mean(lista_temperatura_ordenada)
coeficiente <- (desvio_padrao/media_lista_temperatura)*100
coeficiente
#simetria
# coeficiente de assimetria
skewness(media_final_so)
require(moments)
#simetria
# coeficiente de assimetria
skewness(media_final_so)
View(tabela_frequencia)
# 2 questão
para_calculo <- data.frame("Frequencia absoluta" = tabela_frequencia[2])
View(para_calculo)
# 2 questão
para_calculo <- data.frame("Frequencia absoluta" = tabela_frequencia[2], "Media classses" = tabela_frequencia[8])
View(para_calculo)
# 2 questão
x <- data.frame("Frequencia absoluta" = tabela_frequencia[2], "Media classses" = tabela_frequencia[8])
x <- data.frame("Frequencia absoluta" = tabela_frequencia[2], "Media classses" = tabela_frequencia[8], "XF" =tabela_frequencia[2] * tabela_frequencia[8],
"X^2F" = tabela_frequencia[2] ^ 2 * tabela_frequencia[8] )
View(x)
x <- data.frame("Frequencia absoluta" = tabela_frequencia[2], "Media classses" = tabela_frequencia[8], "XF" =tabela_frequencia[2] * tabela_frequencia[8],
"X^2F" = tabela_frequencia[2] ^ 2 * tabela_frequencia[8] )
View(x)
# 2 questão
z <- data.frame("Frequencia absoluta" = tabela_frequencia[2], "Media classses" = tabela_frequencia[8], "XF" =tabela_frequencia[2] * tabela_frequencia[8],
"X^2F" = tabela_frequencia[2] ^ 2 * tabela_frequencia[8] )
View(z)
z <- data.frame("Frequencia absoluta" = tabela_frequencia[2], "Media classses" = tabela_frequencia[8], "XF" =tabela_frequencia[2] * tabela_frequencia[8],
"X^2F" = tabela_frequencia[8] ^ 2 * tabela_frequencia[2] )
View(z)
somatorio <- mean(z[3])
z[3]
somatorio <- sum(z[3])
somatorio
media <- somatorio / 106
media
some_4_coluna <- sum(z[4])
variancia <- 1/105 + (some_4_coluna - (somatorio^2 / 106)
variancia
variancia <- 1/105 + (some_4_coluna - (somatorio^2 / 106))
variancia
variancia <-( 1/105 + (some_4_coluna - (somatorio^2 / 106)))
variancia
variancia <- (1/105) + (some_4_coluna -(somatorio^2 / 106)
variancia
variancia <- (1/105) + (some_4_coluna -somatorio^2 / 106)
variancia
variancia <- (1/105) * (some_4_coluna -somatorio^2 / 106)
variancia
desvio_padrao <- sqrt(variancia)
desvio_padrao
mediana <- 94 + ((53 + 16)/52) * 2
mediana
assimetria <-( 3 * (media - mediana)) / desvio_padrao
assimetria
assimetria <- 3 * (media - mediana) / desvio_padrao
assimetria
p10c <-( 10/100) * 106
p10c
p25c <-( 25/100) * 106
p25c
p75c <- ( 75/100) * 106
p75c
p90c <-  ( 90/100) * 106
p90c
p10 <- 92 + (10.6 - 2) / 14 * 2
p25 <- 94 + (26.5 - 16) /52 * 2
p75 <- 96 + (79.5 - 68)/ 36 * 2
p90 <- 96 + (95.4 - 68)/ 36 * 2
curtose <-( p75 - p25 )/( 2*(p90 - p10))
curtose
media_classes<- c(3.15, 5.15, 7.15, 9.15)
media_classes<- c(3.15, 5.15, 7.15, 9.15)
distribuicao_frequencia <- data.frame("Classes" = classes, "Frequencia absoluta" = frequencia_absoluta, "Frequencia A%" = frequencia_absoluta_porcentagem,
"Frequencia acumulada" = frequencia_acumulada, "Frequencia relativa"= frequencia_relativa, "Frequencia R%"=frequencia_relativa_porcentagem,
"Media classes" = media_classes)
View(distribuicao_frequencia)
z <- data.frame("Frequencia absoluta" = tabela_frequencia[2], "Media classses" = tabela_frequencia[8], "XF" =tabela_frequencia[2] * tabela_frequencia[7],
"X^2F" = tabela_frequencia[7] ^ 2 * tabela_frequencia[2] )
distribuicao_frequencia <- data.frame("Classes" = classes, "Frequencia absoluta" = frequencia_absoluta, "Frequencia A%" = frequencia_absoluta_porcentagem,
"Frequencia acumulada" = frequencia_acumulada, "Frequencia relativa"= frequencia_relativa, "Frequencia R%"=frequencia_relativa_porcentagem,
"Media classes" = media_classes)
z <- data.frame("Frequencia absoluta" = distribuicao_frequencia[2], "Media classses" = distribuicao_frequencia[7], "XF" =distribuicao_frequencia[2] * distribuicao_frequencia[7],
"X^2F" = distribuicao_frequencia[7] ^ 2 * distribuicao_frequencia[2] )
somatorio <- sum(z[3])
media <- somatorio / 15
some_4_coluna <- sum(z[4])
variancia <- (1/14) * (some_4_coluna -somatorio^2 / 15)
desvio_padrao <- sqrt(variancia)
mediana <- 6.15 + ((7 + 6)/8) * 2
mediana
assimetria <- 3 * (media - mediana) / desvio_padrao
assimetria
